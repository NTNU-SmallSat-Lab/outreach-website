/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query ArticleWithSlug($articlesFilters: ArticleFiltersInput) {\n    articles(filters: $articlesFilters) {\n      data {\n        id\n        attributes {\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          body\n          coverImage {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          datePublished\n          previewTitle\n        }\n      }\n    }\n  }\n  \n  ": types.ArticleWithSlugDocument,
    "\nquery Projects($projectFilters: ProjectFiltersInput) {\n  projects(filters: $projectFilters) {\n    data {\n      attributes {\n        title\n        content\n        satellites {\n          data {\n            id\n            attributes {\n              name\n              previewImage {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n        slug\n        previewImage {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.ProjectsDocument,
    "\n query GET_PROJECTS {\n    projects(sort: [\"publishedAt:desc\"]) {\n        data {\n          id\n          attributes {\n            title\n            content\n            satellites {\n              data {\n                attributes {\n                  catalogNumberNORAD\n                }\n              }\n            }\n            slug\n            previewImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n  }": types.Get_ProjectsDocument,
    "\nquery GET_SATELLITES {\n    satellites {\n      data {\n        id\n        attributes {\n          catalogNumberNORAD\n          name\n          previewImage {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          missionStatus\n          slug\n          massKg\n        }\n      }\n    }\n  }\n": types.Get_SatellitesDocument,
    "\nquery Query($publicationState: PublicationState) {\n    hero(publicationState: $publicationState) {\n      data {\n        attributes {\n          title\n          text\n          image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }": types.QueryDocument,
    "\nquery GET_ARTICLES($pagination: PaginationArg, $filters: ArticleFiltersInput) {\n    articles(sort: [\"datePublished:desc\"], pagination: $pagination, filters: $filters) {\n        data {\n            id\n            attributes {\n                author {\n                    data {\n                        attributes {\n                            name\n                            avatar {\n                                data {\n                                    attributes {\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                previewTitle\n                datePublished\n                body\n                coverImage {\n                    data {\n                        attributes {\n                            url\n                        }\n                    }\n                }\n                createdAt\n                publishedAt\n                slug\n                Tag\n            }\n        }\n        meta {\n            pagination {\n                total\n            }\n        }\n    }\n}\n": types.Get_ArticlesDocument,
    "\nquery FeaturedImage {\n    featuredImage {\n      data {\n        attributes {\n          featuredImage {\n            data {\n                attributes {\n                    url\n                }\n            }\n          }\n          satellite {\n            data {\n              attributes {\n                catalogNumberNORAD\n                name\n                }\n              }\n            }\n            createdAt\n            updatedAt\n            publishedAt\n          }\n        }\n    }\n}\n\n": types.FeaturedImageDocument,
    "query GET_SATELLITE_INFO($filters: SatelliteFiltersInput) {\n      satellites(filters: $filters) {\n        data {\n            id\n            attributes {\n                catalogNumberNORAD\n                content\n                name\n                massKg\n                missionStatus\n              projects {\n                data {\n                  attributes {\n                    title\n                    previewImage {\n                      data {\n                        attributes {\n                          url\n                        }\n                      }\n                    }\n                    slug\n                  }\n                  id\n                }\n              }\n              launchDate\n            }\n        }\n      }\n    }\n  ": types.Get_Satellite_InfoDocument,
    "\n    query GET_SATELLITE_NAMES_AND_ID {\n        satellites {\n            data {\n                id\n                attributes {\n                    catalogNumberNORAD\n                    name\n                }\n            }\n        }\n    }\n": types.Get_Satellite_Names_And_IdDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query ArticleWithSlug($articlesFilters: ArticleFiltersInput) {\n    articles(filters: $articlesFilters) {\n      data {\n        id\n        attributes {\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          body\n          coverImage {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          datePublished\n          previewTitle\n        }\n      }\n    }\n  }\n  \n  "): (typeof documents)["query ArticleWithSlug($articlesFilters: ArticleFiltersInput) {\n    articles(filters: $articlesFilters) {\n      data {\n        id\n        attributes {\n          author {\n            data {\n              attributes {\n                name\n                avatar {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n          body\n          coverImage {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          datePublished\n          previewTitle\n        }\n      }\n    }\n  }\n  \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Projects($projectFilters: ProjectFiltersInput) {\n  projects(filters: $projectFilters) {\n    data {\n      attributes {\n        title\n        content\n        satellites {\n          data {\n            id\n            attributes {\n              name\n              previewImage {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n        slug\n        previewImage {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["\nquery Projects($projectFilters: ProjectFiltersInput) {\n  projects(filters: $projectFilters) {\n    data {\n      attributes {\n        title\n        content\n        satellites {\n          data {\n            id\n            attributes {\n              name\n              previewImage {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n        slug\n        previewImage {\n          data {\n            id\n            attributes {\n              url\n            }\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n query GET_PROJECTS {\n    projects(sort: [\"publishedAt:desc\"]) {\n        data {\n          id\n          attributes {\n            title\n            content\n            satellites {\n              data {\n                attributes {\n                  catalogNumberNORAD\n                }\n              }\n            }\n            slug\n            previewImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n  }"): (typeof documents)["\n query GET_PROJECTS {\n    projects(sort: [\"publishedAt:desc\"]) {\n        data {\n          id\n          attributes {\n            title\n            content\n            satellites {\n              data {\n                attributes {\n                  catalogNumberNORAD\n                }\n              }\n            }\n            slug\n            previewImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GET_SATELLITES {\n    satellites {\n      data {\n        id\n        attributes {\n          catalogNumberNORAD\n          name\n          previewImage {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          missionStatus\n          slug\n          massKg\n        }\n      }\n    }\n  }\n"): (typeof documents)["\nquery GET_SATELLITES {\n    satellites {\n      data {\n        id\n        attributes {\n          catalogNumberNORAD\n          name\n          previewImage {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          missionStatus\n          slug\n          massKg\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery Query($publicationState: PublicationState) {\n    hero(publicationState: $publicationState) {\n      data {\n        attributes {\n          title\n          text\n          image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }"): (typeof documents)["\nquery Query($publicationState: PublicationState) {\n    hero(publicationState: $publicationState) {\n      data {\n        attributes {\n          title\n          text\n          image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GET_ARTICLES($pagination: PaginationArg, $filters: ArticleFiltersInput) {\n    articles(sort: [\"datePublished:desc\"], pagination: $pagination, filters: $filters) {\n        data {\n            id\n            attributes {\n                author {\n                    data {\n                        attributes {\n                            name\n                            avatar {\n                                data {\n                                    attributes {\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                previewTitle\n                datePublished\n                body\n                coverImage {\n                    data {\n                        attributes {\n                            url\n                        }\n                    }\n                }\n                createdAt\n                publishedAt\n                slug\n                Tag\n            }\n        }\n        meta {\n            pagination {\n                total\n            }\n        }\n    }\n}\n"): (typeof documents)["\nquery GET_ARTICLES($pagination: PaginationArg, $filters: ArticleFiltersInput) {\n    articles(sort: [\"datePublished:desc\"], pagination: $pagination, filters: $filters) {\n        data {\n            id\n            attributes {\n                author {\n                    data {\n                        attributes {\n                            name\n                            avatar {\n                                data {\n                                    attributes {\n                                        url\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                previewTitle\n                datePublished\n                body\n                coverImage {\n                    data {\n                        attributes {\n                            url\n                        }\n                    }\n                }\n                createdAt\n                publishedAt\n                slug\n                Tag\n            }\n        }\n        meta {\n            pagination {\n                total\n            }\n        }\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery FeaturedImage {\n    featuredImage {\n      data {\n        attributes {\n          featuredImage {\n            data {\n                attributes {\n                    url\n                }\n            }\n          }\n          satellite {\n            data {\n              attributes {\n                catalogNumberNORAD\n                name\n                }\n              }\n            }\n            createdAt\n            updatedAt\n            publishedAt\n          }\n        }\n    }\n}\n\n"): (typeof documents)["\nquery FeaturedImage {\n    featuredImage {\n      data {\n        attributes {\n          featuredImage {\n            data {\n                attributes {\n                    url\n                }\n            }\n          }\n          satellite {\n            data {\n              attributes {\n                catalogNumberNORAD\n                name\n                }\n              }\n            }\n            createdAt\n            updatedAt\n            publishedAt\n          }\n        }\n    }\n}\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GET_SATELLITE_INFO($filters: SatelliteFiltersInput) {\n      satellites(filters: $filters) {\n        data {\n            id\n            attributes {\n                catalogNumberNORAD\n                content\n                name\n                massKg\n                missionStatus\n              projects {\n                data {\n                  attributes {\n                    title\n                    previewImage {\n                      data {\n                        attributes {\n                          url\n                        }\n                      }\n                    }\n                    slug\n                  }\n                  id\n                }\n              }\n              launchDate\n            }\n        }\n      }\n    }\n  "): (typeof documents)["query GET_SATELLITE_INFO($filters: SatelliteFiltersInput) {\n      satellites(filters: $filters) {\n        data {\n            id\n            attributes {\n                catalogNumberNORAD\n                content\n                name\n                massKg\n                missionStatus\n              projects {\n                data {\n                  attributes {\n                    title\n                    previewImage {\n                      data {\n                        attributes {\n                          url\n                        }\n                      }\n                    }\n                    slug\n                  }\n                  id\n                }\n              }\n              launchDate\n            }\n        }\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GET_SATELLITE_NAMES_AND_ID {\n        satellites {\n            data {\n                id\n                attributes {\n                    catalogNumberNORAD\n                    name\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GET_SATELLITE_NAMES_AND_ID {\n        satellites {\n            data {\n                id\n                attributes {\n                    catalogNumberNORAD\n                    name\n                }\n            }\n        }\n    }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;